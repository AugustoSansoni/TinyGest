//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Estro.TinyGest.Entities
{
    public partial class Order
    {
        #region Primitive Properties
    
        public virtual int OrderId
        {
            get;
            set;
        }
    
        public virtual string Number
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreationDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeliveryDate
        {
            get;
            set;
        }
    
        public virtual int CustomerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    if (Customer != null && Customer.CustomerId != value)
                    {
                        Customer = null;
                    }
                    _customerId = value;
                }
            }
        }
        private int _customerId;

        #endregion
        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
        public virtual ICollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    var newCollection = new FixupCollection<Invoice>();
                    newCollection.CollectionChanged += FixupInvoices;
                    _invoices = newCollection;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    var previousValue = _invoices as FixupCollection<Invoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    var newValue = value as FixupCollection<Invoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvoices;
                    }
                }
            }
        }
        private ICollection<Invoice> _invoices;
    
        public virtual ICollection<OrderLine> Lines
        {
            get
            {
                if (_lines == null)
                {
                    var newCollection = new FixupCollection<OrderLine>();
                    newCollection.CollectionChanged += FixupLines;
                    _lines = newCollection;
                }
                return _lines;
            }
            set
            {
                if (!ReferenceEquals(_lines, value))
                {
                    var previousValue = _lines as FixupCollection<OrderLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLines;
                    }
                    _lines = value;
                    var newValue = value as FixupCollection<OrderLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLines;
                    }
                }
            }
        }
        private ICollection<OrderLine> _lines;
    
        public virtual ICollection<OrderNote> Notes
        {
            get
            {
                if (_notes == null)
                {
                    var newCollection = new FixupCollection<OrderNote>();
                    newCollection.CollectionChanged += FixupNotes;
                    _notes = newCollection;
                }
                return _notes;
            }
            set
            {
                if (!ReferenceEquals(_notes, value))
                {
                    var previousValue = _notes as FixupCollection<OrderNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNotes;
                    }
                    _notes = value;
                    var newValue = value as FixupCollection<OrderNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNotes;
                    }
                }
            }
        }
        private ICollection<OrderNote> _notes;

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Orders.Contains(this))
                {
                    Customer.Orders.Add(this);
                }
                if (CustomerId != Customer.CustomerId)
                {
                    CustomerId = Customer.CustomerId;
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    if (!item.Orders.Contains(this))
                    {
                        item.Orders.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (item.Orders.Contains(this))
                    {
                        item.Orders.Remove(this);
                    }
                }
            }
        }
    
        private void FixupLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderLine item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }
    
        private void FixupNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderNote item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }

        #endregion
    }
}
