//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Estro.TinyGest.Entities
{
    public partial class Invoice
    {
        #region Primitive Properties
    
        public virtual int InvoiceId
        {
            get;
            set;
        }
    
        public virtual string Number
        {
            get;
            set;
        }
    
        public virtual System.DateTime Date
        {
            get;
            set;
        }
    
        public virtual string CustomerName
        {
            get;
            set;
        }
    
        public virtual string CustomerAddress
        {
            get;
            set;
        }
    
        public virtual decimal Total
        {
            get;
            set;
        }
    
        public virtual int CustomerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    if (CustomerRef != null && CustomerRef.CustomerId != value)
                    {
                        CustomerRef = null;
                    }
                    _customerId = value;
                }
            }
        }
        private int _customerId;

        #endregion
        #region Navigation Properties
    
        public virtual Customer CustomerRef
        {
            get { return _customerRef; }
            set
            {
                if (!ReferenceEquals(_customerRef, value))
                {
                    var previousValue = _customerRef;
                    _customerRef = value;
                    FixupCustomerRef(previousValue);
                }
            }
        }
        private Customer _customerRef;
    
        public virtual ICollection<InvoiceLine> Lines
        {
            get
            {
                if (_lines == null)
                {
                    var newCollection = new FixupCollection<InvoiceLine>();
                    newCollection.CollectionChanged += FixupLines;
                    _lines = newCollection;
                }
                return _lines;
            }
            set
            {
                if (!ReferenceEquals(_lines, value))
                {
                    var previousValue = _lines as FixupCollection<InvoiceLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLines;
                    }
                    _lines = value;
                    var newValue = value as FixupCollection<InvoiceLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLines;
                    }
                }
            }
        }
        private ICollection<InvoiceLine> _lines;
    
        public virtual ICollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    var newCollection = new FixupCollection<Order>();
                    newCollection.CollectionChanged += FixupOrders;
                    _orders = newCollection;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    var previousValue = _orders as FixupCollection<Order>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrders;
                    }
                    _orders = value;
                    var newValue = value as FixupCollection<Order>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrders;
                    }
                }
            }
        }
        private ICollection<Order> _orders;
    
        public virtual ICollection<InvoiceNote> AdministrativeInvoiceNotes
        {
            get
            {
                if (_administrativeInvoiceNotes == null)
                {
                    var newCollection = new FixupCollection<InvoiceNote>();
                    newCollection.CollectionChanged += FixupAdministrativeInvoiceNotes;
                    _administrativeInvoiceNotes = newCollection;
                }
                return _administrativeInvoiceNotes;
            }
            set
            {
                if (!ReferenceEquals(_administrativeInvoiceNotes, value))
                {
                    var previousValue = _administrativeInvoiceNotes as FixupCollection<InvoiceNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAdministrativeInvoiceNotes;
                    }
                    _administrativeInvoiceNotes = value;
                    var newValue = value as FixupCollection<InvoiceNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAdministrativeInvoiceNotes;
                    }
                }
            }
        }
        private ICollection<InvoiceNote> _administrativeInvoiceNotes;

        #endregion
        #region Association Fixup
    
        private void FixupCustomerRef(Customer previousValue)
        {
            if (previousValue != null && previousValue.Invoices.Contains(this))
            {
                previousValue.Invoices.Remove(this);
            }
    
            if (CustomerRef != null)
            {
                if (!CustomerRef.Invoices.Contains(this))
                {
                    CustomerRef.Invoices.Add(this);
                }
                if (CustomerId != CustomerRef.CustomerId)
                {
                    CustomerId = CustomerRef.CustomerId;
                }
            }
        }
    
        private void FixupLines(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (InvoiceLine item in e.NewItems)
                {
                    item.Invoice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                }
            }
        }
    
        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    if (!item.Invoices.Contains(this))
                    {
                        item.Invoices.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (item.Invoices.Contains(this))
                    {
                        item.Invoices.Remove(this);
                    }
                }
            }
        }
    
        private void FixupAdministrativeInvoiceNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (InvoiceNote item in e.NewItems)
                {
                    item.Invoice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                }
            }
        }

        #endregion
    }
}
